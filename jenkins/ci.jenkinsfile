pipeline {
    agent any
    parameters {
        string(name: 'VERSION', defaultValue: '1.0.0', description: 'pass the version in the following format x.x.x')
    }
    environment {
        IMAGE_NAME = "main-app"
        IMAGE_VERSION = "${VERSION}-${BUILD_NUMBER}"
        REGISTRY_NAME = "stassoacrdev"
        ACR_LOGIN_SERVER = "${REGISTRY_NAME}.azurecr.io"
        REPOSITORY_NAME = "$IMAGE_NAME"
    }
    stages {
        stage('Build App') {
            agent {
                docker {
                    image 'maven:3.8.3-openjdk-17'
                }
            }
            steps {
                withMaven(options: [artifactsPublisher(archiveFilesDisabled: true)]) {
                    sh 'mvn clean install'
                }
                stash(includes: '**/target/*.jar', name: "app")
            }
        }
        stage('Build Image') {
            when {
                branch 'main'
            }
            steps {
                unstash('app')
                script {
                    sh "ls -l"
                }
                sh "docker build -t $IMAGE_NAME --build-arg IMAGE_VERSION=${IMAGE_VERSION} -f docker/main-app.dockerfile ."
            }
        }
        stage('Push Image') {
            when {
                branch 'main'
            }
            steps {
                sh "docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:${IMAGE_VERSION}"
                script {
                    withCredentials([usernamePassword(credentialsId: 'azure-sp', usernameVariable: 'SERVICE_PRINCIPAL_ID', passwordVariable: 'SERVICE_PRINCIPAL_PASSWORD')]) {
                        sh "docker login ${ACR_LOGIN_SERVER} -u $SERVICE_PRINCIPAL_ID -p $SERVICE_PRINCIPAL_PASSWORD"
                        sh "docker push ${IMAGE_NAME}:${IMAGE_VERSION}"
                        sh "docker push ${IMAGE_NAME}:latest"
                    }
                }
            }
        }
    }
    post {
        success {
            archiveArtifacts(artifacts: '**/target/*.jar', allowEmptyArchive: true)
        }
    }
}